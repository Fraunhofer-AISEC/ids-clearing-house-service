<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          https://www.springframework.org/schema/beans/spring-beans.xsd
          http://camel.apache.org/schema/spring
          https://camel.apache.org/schema/spring/camel-spring.xsd">

    <camel:sslContextParameters id="rootServerSslContext" certAlias="1">
        <camel:keyManagers keyPassword="password">
            <camel:keyStore resource="etc/keystore.p12" password="password"/>
        </camel:keyManagers>
        <camel:trustManagers>
            <camel:keyStore resource="etc/truststore.p12" password="password"/>
        </camel:trustManagers>
    </camel:sslContextParameters>

    <bean name="rootDaps" class="de.fhg.aisec.ids.idscp2.beans.AisecDapsDriverFactoryBean">
        <property name="dapsUrl" value="https://daps-dev.aisec.fraunhofer.de/v4"/>
        <property name="dapsSslParameters" ref="rootServerSslContext"/>
        <property name="transportCertificatesParameters" ref="rootServerSslContext"/>
    </bean>

    <bean id="jetty" class="org.apache.camel.component.jetty9.JettyHttpComponent9">
        <property name="sslSocketConnectorProperties">
            <map>
                <entry key="needClientAuth" value="true"/>
            </map>
        </property>
    </bean>

    <bean name="attestationConfig" class="de.fhg.aisec.ids.idscp2.beans.AttestationConfigFactoryBean">
        <property name="expectedRaSuite" value="Dummy2|Dummy"/>
        <property name="supportedRaSuite" value="Dummy2|Dummy"/>
    </bean>

    <bean name="idscp2Config" class="de.fhg.aisec.ids.idscp2.beans.Idscp2ConfigurationFactoryBean">
        <property name="attestationConfig" ref="attestationConfig"/>
        <property name="dapsDriver" ref="rootDaps"/>
        <property name="handshakeTimeoutDelay" value="10000"/>
    </bean>

    <bean name="tlsConfig" class="de.fhg.aisec.ids.idscp2.beans.NativeTlsConfigurationBuilderFactoryBean">
        <property name="sslParameters" ref="rootServerSslContext"/>
    </bean>

    <!-- Routes -->
    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <restConfiguration scheme="https" component="jetty" host="0.0.0.0" port="9999" bindingMode="off">
            <endpointProperty key="sslContextParameters" value="#rootServerSslContext"/>
        </restConfiguration>

        <rest id="CH_REST">
            <post path="/selfInformation">
                <to uri="direct:route-self"/>
            </post>
            <post path="/messages/query/{pid}" id="CH_QUERY_PID">
                <to uri="direct:multipart" />
            </post>
            <post path="/messages/query/{pid}/{id}" id="CH_QUERY_PID_ID">
                <to uri="direct:multipart" />
            </post>
            <post path="/messages/log/{pid}" id="CH_LOG_PID">
                <to uri="direct:multipart" />
            </post>
            <post path="/process/{pid}" id="CH_CREATE_PID">
                <to uri="direct:multipart" />
            </post>
        </rest>

        <route id="route-self">
            <from uri="direct:route-self"/>
            <process ref="idsMultiPartInputProcessor"/>
            <process ref="idsMessageTypeExtractionProcessor"/>
            <choice>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'DescriptionRequestMessage'</simple>
                    <log message="### Received DescriptionRequestMessage ###"/>
                    <process ref="descriptionRequestProcessor"/>
                    <process ref="idsMultiPartOutputProcessor"/>
                </when>
                <otherwise>
                    <log loggingLevel="ERROR"
                         message="### Server received unexpected message (otherwise branch):\n${body}\n### Header: ###\n${headers[ids-header]}"/>
                    <removeHeader name="ids-header"/>
                    <setBody>
                        <simple>${null}</simple>
                    </setBody>
                </otherwise>
            </choice>
        </route>

        <route id="CH_MULTIPART_ROUTE">
            <from uri="direct:multipart"/>
            <onException>
                <exception>java.io.IOException</exception>
                <exception>java.lang.SecurityException</exception>
                <exception>java.lang.IllegalArgumentException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <transform><simple>${exception.message}</simple></transform>
                <log message="### Handle ${exception.class} ###"/>
                <log message="### Got ${exception.stacktrace} ###"/>
                <removeHeader name="ids-header"/>
                <removeHeader name="ids-protocol"/>
                <removeHeader name="pid"/>
                <removeHeader name="id"/>
                <choice>
                    <when>
                        <simple>${exception.class} == 'java.lang.SecurityException' || ${exception.class} == 'java.lang.IllegalArgumentException'</simple>
                        <setHeader name="CamelHttpResponseCode"><simple>401</simple></setHeader>
                    </when>
                    <when>
                        <simple>${exception.class} == 'java.io.IOException' || ${exception.class} == 'java.lang.RuntimeException'</simple>
                        <setHeader name="CamelHttpResponseCode"><simple>400</simple></setHeader>
                    </when>
                    <otherwise>
                        <setHeader name="CamelHttpResponseCode"><simple>500</simple></setHeader>
                        <transform><constant>Internal Server Error</constant></transform>
                    </otherwise>
                </choice>
            </onException>            
            <process ref="idsMultiPartInputProcessor" />
            <setHeader name="ids-protocol"><simple>idsMultipart</simple></setHeader>
            <process ref="chInputValidationProcessor" />
            <process ref="chSharedSecretProcessor" />
            <to uri="http://logging-service:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
            <process ref="chOutputProcessor" />
            <process ref="idsMultiPartOutputProcessor" />
        </route>
        <route id="CH_IDSCP2_ROUTE">
            <from uri="idscp2server://0.0.0.0:29292?idscp2Configuration=#idscp2Config&amp;secureChannelConfigurationBuilder=#tlsConfig&amp;useIdsMessages=true&amp;copyHeadersRegex=%28ch-ids-%5Ba-z%5D%2A%7CContent-Type%29"/>
            <onException>
                <exception>java.io.IOException</exception>
                <exception>java.lang.RuntimeException</exception>
                <exception>java.lang.SecurityException</exception>
                <exception>java.lang.IllegalArgumentException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="### Handle ${exception.class} ###"/>
                <removeHeader name="ids-header"/>
                <removeHeader name="ids-protocol"/>
                <removeHeader name="pid"/>
                <removeHeader name="id"/>
                <process ref="chExceptionProcessor"/>
            </onException>
            <process ref="idsMessageTypeExtractionProcessor"/>
            <setHeader name="ids-protocol"><simple>idscp2</simple></setHeader>
            <choice>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'RequestMessage'</simple>
                    <log message="### Handle RequestMessage ###"/>
                    <setHeader name="CamelHttpMethod"><simple>POST</simple></setHeader>
                    <setHeader name="CamelHttpPath"><simple>/process/${headers.ch-ids-pid}</simple></setHeader>                    
                    <process ref="chIdscp2InputParser"/>
                    <process ref="chSharedSecretProcessor" />
                    <to uri="http://logging-service:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                    <process ref="chOutputProcessor" />
                </when>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'QueryMessage'</simple>
                    <log message="### Handle QueryMessage ###"/>
                    <setHeader name="CamelHttpMethod"><simple>POST</simple></setHeader>
                    <setHeader name="CamelHttpPath"><simple>/messages/query/${headers.ch-ids-pid}</simple></setHeader>
                    <process ref="chIdscp2InputParser"/>
                    <process ref="chSharedSecretProcessor" />
                    <to uri="http://logging-service:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                    <process ref="chOutputProcessor" />
                </when>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'LogMessage'</simple>
                    <log message="### Handle LogMessage ###"/>
                    <setHeader name="CamelHttpMethod"><simple>POST</simple></setHeader>
                    <setHeader name="CamelHttpPath"><simple>/messages/log/${headers.ch-ids-pid}</simple></setHeader>                    
                    <process ref="chIdscp2InputParser"/>
                    <process ref="chSharedSecretProcessor" />
                    <to uri="http://logging-service:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                    <process ref="chOutputProcessor" />
                </when>
                <otherwise>
                    <log loggingLevel="ERROR" message="### Server received unexpected message (otherwise branch):\n${body}\n### Header: ###\n${headers[idscp2-header]}"/>
                    <setBody><simple>${null}</simple></setBody>
                </otherwise>
            </choice>
            <removeHeader name="ids-protocol"/>
            <removeHeader name="pid"/>
            <removeHeader name="id"/>
        </route>        
    </camelContext>
</beans>
